package com.testclient.luominming.testclient;

import android.app.Activity;
import android.content.Intent;
import android.net.DhcpInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.Bundle;
import android.text.LoginFilter;
import android.text.format.Formatter;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import java.lang.Byte;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.Timer;
import java.util.TimerTask;
public class MainActivitytest extends Activity implements View.OnClickListener,View.OnLongClickListener  {
    String hostName="172.16.106.188";
    int port=8300;
    //String hostName = "192.168.43.178";
//    int port = 30000;
    int localport = 40696;
    String TAG = "test";
    TextView result, show;
    Button send;
    EditText input, portedit;
    int sercretNum = 1, sercretNum2 = 1;
    private Button connect;
    private Button aButton, bButton, cButton;
    private Button disconnect;
    private WifiAdmin mWifiAdmin;
    public String content;
    public  Button L1_on_off,L2_on_off,L3_on_off;
    String inputContent;
    MyThread clientTHread;
    String before;
    Timer timer = new Timer();
    boolean IsreadFirst = true;
    Socket socket = new Socket();
    boolean IsSendOK = true;
    OutputStream ou=null;
    boolean toast=true;
    int secret=1;
     boolean FirstConnect=true;
    InetSocketAddress inetSocketAddress;
   TextView IPconfirm;
    int count=0;
    int what_P=6,what_M=7,what_L=8,what_G=9;
    public Handler myHandler = new Handler(Looper.getMainLooper()) {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what){
            case 1:
            { result.append("server:" + msg.obj + "\n");
                if (!msg.obj.equals(null))
                    result.setText("PM2.5:" + msg.obj);
                Log.i("readlog", "handleMessage: msg" + msg.obj);}
                break;
                case 2:dayin("connected");break;
                case 6: dayin("p");break;
                case 7:dayin("M");break;
                case 8:dayin("L");break;
                case 9:dayin("G");break;
            default:
                break;

            }
//
//            if (msg.what == 1) {
////
//            } else if(msg.what==2){
//
//            }
        }
    };
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        result.setMovementMethod(ScrollingMovementMethod.getInstance());
        mWifiAdmin = new WifiAdmin(MainActivitytest.this);
    }
    private void setListener() {
        connect.setOnClickListener(MainActivitytest.this);
        disconnect.setOnClickListener(MainActivitytest.this);
        aButton.setOnClickListener(this);
        bButton.setOnClickListener(this);
        cButton.setOnClickListener(this);
        show.setOnClickListener(this);
        send.setOnClickListener(this);
        //设置长按功能
        aButton.setOnLongClickListener(this);
        bButton.setOnLongClickListener(this);
        cButton.setOnLongClickListener(this);
        connect.setOnLongClickListener(this);
    }
    private void initView() {
        connect = (Button) findViewById(R.id.connect);
        disconnect = (Button) findViewById(R.id.disconnect);
        portedit = findViewById(R.id.port);
        aButton = findViewById(R.id.PP);
        result = (TextView) findViewById(R.id.result);
        send = (Button) findViewById(R.id.send);
        input = (EditText) findViewById(R.id.input);
        bButton = findViewById(R.id.LL);
        cButton = findViewById(R.id.MM);
        show = findViewById(R.id.show);
        L1_on_off=findViewById(R.id.L1_on_off);
        L2_on_off=findViewById(R.id.L2_on_off);
        L3_on_off=findViewById(R.id.L3_on_off);
        IPconfirm=findViewById(R.id.IPconfirm);
        setListener();
    }



    class MyThread extends Thread {
        String received = "";
        int i = 1;
        String before = "before";
        BufferedReader bff = null;
        Message msg;
        public MyThread(String str) {
            content = str;
            Log.i(TAG, "MyThread: mythead()");
        }
        @Override
        public void run() {
            //定义消息
            boolean b = true;
            int end;
            Log.i(TAG, "run: in socketName\n" + socket);
            Log.i(TAG, "run: contentInittial::" + content);
            // while (true)
            {
                try {
                    inetSocketAddress = new InetSocketAddress(hostName, port);
                    Log.i(TAG, "run: content" + content);
                    Log.i(TAG, "run: InitconnectOrNot" + socket.isConnected());
                    if (!socket.isConnected()) {
                        socket = new Socket();
                        inetSocketAddress = new InetSocketAddress(hostName, port);
                        IsreadFirst = true;
                        Log.i(TAG, "run: connect is not connect,begin connect");
                        socket.connect(inetSocketAddress, 5000);
                        toast=true;
                        ou = socket.getOutputStream();
                        Log.i(TAG, "run: connectedOrnot" + socket.isConnected());
                        //  socket.setSoTimeout(100);
                        Log.i(TAG, "run: bff" + content);
                        if(socket.isConnected()&&toast)
                        {
                        Message msg = new Message();
                        msg.what = 2;
                        msg.obj = "connected";
                        //发送消息 修改UI线程中的组件
                        myHandler.sendMessage(msg);
                        toast=false;
                        }
                    }
                    Log.i(TAG, "run: connected mythread");
                    Log.i(TAG, "run: outpustream");
                    Log.i(TAG, "run: out.write() starting");
                    ou.write(content.getBytes("utf-8"));
                    Log.i(TAG, "run: sendcontent1" + content);
                    Log.i(TAG, "run: ou.write() have excuted");
                    ou.flush();
                  //  if (IsreadFirst)
                    {IsreadFirst = false;
                        Log.i(TAG, "run: Isreadfirst:new ReadThread" + IsreadFirst);
                       // new ReadThread(socket).start();
                        // timer.schedule(timerTask,500,3000);
                    }
                   // Log.i(TAG, "run: begin in socket in");
                    // Log.i(TAG, "run: EOF");
                    // }
                    //读取发来服务器信息

                    //关闭各种输入输出流
//                    ou.close();
//                  //  socket.close();
////                  IsSendOK=false;
                } catch (SocketTimeoutException aa) {
                    //连接超时 在UI界面显示消息
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = "安德赛提醒您,服务器连接失败！请检查网络是否打开";
                    //发送消息 修改UI线程中的组件
                    myHandler.sendMessage(msg);
                } catch (IOException e) {
                    e.printStackTrace();
                    Log.i(TAG, "run: MythreadIOExeption");
                } finally {
                    Log.i(TAG, "run: finally"+socket);
                    Log.i(TAG, "run: socketstate:"+socket.isConnected());
//                    try {
//                        socket.shutdownOutput();
//                        Log.i(TAG, "run: tupoutdown");
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    }
                }
                Log.i(TAG, "run: finally"+socket);
                Log.i(TAG, "run: socketstate:"+socket.isConnected());

                String buffer="";
                String result="";
                InputStream socketInputStream = null;
                Log.i(TAG, "run:socket.getInputStream()");

                try {
                    socketInputStream = socket.getInputStream();
//                    bff = new BufferedReader(new InputStreamReader(
//                            socket.getInputStream()));
////                    while ((buffer = bff.readLine()) != null)
//                    socket.getInputStream().read();
//                    buffer=bff.readLine();
                    byte[] bytes=new byte[10];
                   // while ((end= socketInputStream.read(bytes)) !=-1)
                    socketInputStream.read(bytes);
                    try{
                    Log.i(TAG+"bytes", "run:byte0\n "+(char)bytes[0]+"byte1:\n "+(char)bytes[1]+"\n");
                    Log.i(TAG+"bytes", "run:byte2\n "+(char)bytes[2]+"byte3:\n "+(char)bytes[3]+"\n");
                    Log.i(TAG+"bytes", "run:byte4\n "+(char)bytes[4]+"byte4:\n "+(char)bytes[5]+"\n");
                    Log.i(TAG+"bytes", "run:byte6\n "+(char)bytes[6]+"byte6:\n "+(char)bytes[7]+"\n");}
                    catch (Exception e){
                        e.printStackTrace();
                        Log.i(TAG, "run: logiException");
                    }
                    String test=new String(bytes,"UTF-8");
                    Log.i(TAG+"socketinputstream", test);
                    buffer=buffer+test;
                    {
                        result = buffer;
//                        result=buffer;
                        Log.i("readlog", "run: buffer begin" + buffer);
                    }
                    Log.i("readlog", "run: send content:" + content);

                    Log.i("readlog", "run: result received:" +result);
                } catch (IOException e) {
                    e.printStackTrace();
                    Log.i("readlog", "run:ReadThread IOException");
                }
                Log.i("test", "run:buffer end");

                 //if (!result.equals(""))
                {   String returnString=result.trim();
                    result=dealWithReturnString(returnString);
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = result.toString();
                    //发送消息 修改UI线程中的组件
                    myHandler.sendMessage(msg);
                    Log.i("readlog", "run: resulttoString:"+result);
                    //msg = null;
                }
//                if(result.equals("ABC")){
//                     new MyThread("OK").start();
//                }
                String received = result.toString();
                // before = result.toString();
            }
//            try {          //不能关闭
//                socket.close();
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
        }

        private String  dealWithReturnString(String returnString) {
            String dealString ="";
            String P_STATE="";
            String L_STATE="";
            char fiirLetter='1';
            char secondLetter='2';
            char thirdLetter='3';
            char fourLetter='4';
            Log.i(TAG, "dealWithReturnString: "+returnString);
            if(returnString.length()>=4){
                try{
             fiirLetter=returnString.charAt(0);
             secondLetter=returnString.charAt(1);
             thirdLetter=returnString.charAt(2);
             fourLetter=returnString.charAt(3);
                    Log.i(TAG, "dealWithReturnString: fiirLetter:"+fiirLetter+"secondletter:"
                            +secondLetter+"thirdLetter:"+thirdLetter+"fourLetter"+fourLetter);
                }catch (Exception e){
                    e.printStackTrace();
                    Log.i(TAG, "dealWithReturnString: retunningstring");
                }
                }
            if(fiirLetter=='O') //判断接收成功
            {
                switch (secondLetter){   //判断按键选择
                    case   'P'://按下Power键的
                    {   Log.i(TAG, "dealWithReturnString: secondLetter"+secondLetter);
                        switch (fourLetter)
                        {
                            case '0':P_STATE="关机";break;
                            case '1':P_STATE="一档";break;
                            case '2':P_STATE="二档";break;
                            case '4':P_STATE="三档";break;
                            case '8':P_STATE="四档";break;
                        }
                        Message msg1 = new Message();
                        msg1.what = what_P;
                        msg1.obj = P_STATE;
                    }
                        break;
                    case   'L':
                        {
                            switch (fourLetter)
                            {
                                case '1':L_STATE=  "加热开";break;
                                case '2':L_STATE=  "加热关";break;
                            }
                            Message msg1 = new Message();
                            msg1.what = what_L;  //L返回的数值
                            msg1.obj = L_STATE;
                    }
                        break;
                    case   'M':
                    {
                        switch (fourLetter)
                        {
                            case '1':L_STATE=  "手动模式";break;
                            case '2':L_STATE= "自动模式";break;
                            case '4':L_STATE=  "睡眠模式";break;
                        }
                        Message msg1 = new Message();
                        msg1.what = what_M;  //L返回的数值
                        msg1.obj = L_STATE;

                    }
                        break;
                    case   'G':
                      String Gvalue=returnString.substring(3);
                        Log.i(TAG, "dealWithReturnString: GValue"+Gvalue);
                      return Gvalue;
                }
                myHandler.sendMessage(msg);
            }
            

            else{
               //retrun "erro";
               return returnString;
            }

            return  dealString;
        }
    }
    public class ReadThread extends Thread {
        Socket socket;
        BufferedReader bff = null;
        String result = "";
        String buffer = "";

        public ReadThread(Socket sk) {
            socket = sk;
        }
        @Override
        public void run() {
            //  while(true)
            {
                if (!socket.isConnected()) {
                    socket = new Socket();
                    Log.i("readlog", "run: readthraedconnect");
                    try {
                        socket.connect(inetSocketAddress, 5000);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    Log.i("readlog", "run: readthreadconnected");
                    //  socket.setSoTimeout(100);

                    Log.i("readlog", "run: bff" + content);
                }
                // Log.i(TAG, "run: runreadinConncetOrNot"+socket.isConnected());

                InputStream socketInputStream = null;
                try {
                    socketInputStream = socket.getInputStream();
                    bff = new BufferedReader(new InputStreamReader(
                            socketInputStream));
                    while ((buffer = bff.readLine()) != null) {
                        result = buffer;
                        Log.i("readlog", "run: buffer" + buffer);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    Log.i("readlog", "run:ReadThread IOException");

                }
                {
                }
                Log.i("readlog", "run: readbegin");

                Log.i("tes", "run:buffer end");
                if (result.equals(null)){
                    Log.i("readlog", "run: can not receive the andesai information");
                }else
                {
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = result.toString();
                    //发送消息 修改UI线程中的组件
                    myHandler.sendMessage(msg);
                    Log.i("readlog", "run: resulttoString:"+result+"test");
                    //msg = null;
                }
                String received = result.toString();
               // before = result.toString();
                Log.i("readlog", "run: sendcontent:" + content);
                Log.i("readlog", "run: resultreceived:" +received);
                // socketInputStream.reset();

                //bff.close();
            }
        }
    }
    private String getlocalip() {
        Log.i(TAG, "getlocalip: ");
        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(getApplicationContext().WIFI_SERVICE);
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();
        int ipAddress = wifiInfo.getIpAddress();
        //  Log.d(Tag, "int ip "+ipAddress);
        DhcpInfo dhcpInfo = wifiManager.getDhcpInfo();
        Log.i(TAG, "getlocalip: " + Formatter.formatIpAddress(dhcpInfo.gateway));

        Log.i(TAG, "getlocalipserver: " + Formatter.formatIpAddress(dhcpInfo.serverAddress));
        Log.i(TAG, "wifiInfoID: " + wifiInfo.getNetworkId());

        Log.i(TAG, "getlocalip: " + wifiInfo.getSSID());//路由器名称
        if (ipAddress == 0) return null;
        return ((ipAddress & 0xff) + "." + (ipAddress >> 8 & 0xff) + "."
                + (ipAddress >> 16 & 0xff) + "." + (ipAddress >> 24 & 0xff));
    }

    class SecondSocketThread extends Thread {
        @Override
        public void run() {
            while (FirstConnect){
                FirstConnect=false;
                if(!socket.isConnected())
                {Message msg = new Message();
                msg.what = 3;
                msg.obj = result.toString();
                }
            }
        }
    }
    public void IPButton(View view) {
        secret++;
        String IP=input.getText().toString();
        String port1=portedit.getText().toString();
        { if(!port1.equals("")){
            port=Integer.parseInt(port1);}
        if(!IP.equals("")){
            hostName=IP;}
        dayin("IP："+hostName+" "+"端口："+port);
        if(secret>10){
            show.setVisibility(View.VISIBLE);
            send.setVisibility(View.VISIBLE);
        }
        }
        connect.setText("WIFI连接");
        portedit.setVisibility(View.INVISIBLE);
        input.setVisibility(View.INVISIBLE);
        IPconfirm.setVisibility(View.INVISIBLE);
        //count++;

    }
    public void connect() {
        mWifiAdmin.connect();
        startActivity(new Intent(android.provider.Settings.ACTION_WIFI_SETTINGS));
    }
    public void disconnect() {
        mWifiAdmin.disconnectWifi();
    }
    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.connect:
                connect();
                Log.i("test", "onClick: "+getlocalip());
                break;
            case R.id.disconnect:disconnect();break;
            case R.id.PP:
//                content="a";break;
//               Log.i(TAG, "onClick: aaa");
//                sendMessageButton("ABC");break;
                new MyThread("P1").start();
                dayin(content);
                Log.i(TAG, "onClick: test"+socket);
                break;
            case R.id.LL:
               new MyThread("L1").start();
               break;
            case R.id.MM:
                new MyThread("M1").start();
                //input.setText(getLocalIpAddress());
                break;
            case R.id.show:
                showguanwang();break;
            case R.id.send:
                String inputContent = input.getText().toString();
                // result.setText("安德塞APP客户端:" + inputContent + "\n");
                //启动线程 向服务器发送和接收信息
                // localNet("ip");
                Log.i("Isreable", "onClick: ");
                // if(clientTHread==null){
                clientTHread= new MyThread(inputContent);
                clientTHread.start();break;
            default:
                Log.i(TAG, "onClick: default");
                break;
        }
    }
    @Override
    public boolean onLongClick(View v) {
        {
        switch (v.getId()) {
            case R.id.PP:{

                new MyThread("P2").start();
                dayin(content);
                Log.i(TAG, "onClick: test"+socket);
                break;}
                case R.id.LL:
                new MyThread("L2").start();
                break;
            case R.id.MM:
                new MyThread("M2").start();
            case R.id.connect:{
                if(count%2==0){
                    connect.setText("点击确认");
                    portedit.setVisibility(View.VISIBLE);
                    input.setVisibility(View.VISIBLE);
                    IPconfirm.setVisibility(View.VISIBLE);
                }else {
                    connect.setText("WIFI连接");
                    portedit.setVisibility(View.INVISIBLE);
                    input.setVisibility(View.INVISIBLE);
                    IPconfirm.setVisibility(View.INVISIBLE);
                }
                  count++;}
    }
    return false;
    }
    }
    private void showguanwang() {
//        Uri uri = Uri.parse("https://www.riskstorm.com/company/91441300MA4WK7QB7X#event");//密码qjfd
//        //Uri uri = Uri.parse("https://pan.baidu.com/disk/home?errno=0&errmsg=Auth%20Login%20Sucess&&bduss=&ssnerror=0#list/vmode=list&path=%2F%E6%88%91%E7%9A%84%E8%AE%BA%E6%96%87");
//        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
//        startActivity(intent);
        // if(sercretNum>=3)
        {try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            socket=new Socket();
        }
        dayin("IP："+hostName+" "+"port："+port);
    }
    private void sendMessageButton(String a) {
        {     content=a;
            if(clientTHread==null)
            {
                clientTHread=new MyThread(a);
                clientTHread.start();
                IsSendOK=true;
            }
            // new MyThread(a).start();
        }
    }
    public void dayin(String str){
        Toast.makeText(MainActivitytest.this,str,Toast.LENGTH_SHORT).show();
    }
    public String getLocalIpAddress()
    {try
    {for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();)
    {
        NetworkInterface intf = en.nextElement();
        for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();)
        {
            InetAddress inetAddress = enumIpAddr.nextElement();
            if (!inetAddress.isLoopbackAddress()&!inetAddress.isLinkLocalAddress())
            {  Log.i(TAG, "getLocalIpAddress: "+inetAddress.getHostAddress().toString());
                return inetAddress.getHostAddress().toString();

            }
        }
    }
    }
    catch (SocketException ex)
    {
        Log.e("IpAddress", ex.toString());
    }
        return null;
    }
    TimerTask timerTask=new TimerTask() {
        BufferedReader bff=null;
        String result = "";
        String buffer ="";
        @Override
        public void run() {
            // while(true)
            {
               // Log.i(TAG, "run: runreadin");
                Log.i("readlog", "run: readbegin");
                InputStream socketInputStream= null;
                try {
                    socketInputStream = socket.getInputStream();
                    bff = new BufferedReader(new InputStreamReader(
                            socketInputStream));
                    while ((buffer = bff.readLine()) != null)
                    {
                        result = buffer;
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    Log.i(TAG, "run: IOException");
                }
                {
                    Message msg = new Message();
                    msg.what = 1;
                    msg.obj = result.toString();
                    myHandler.sendMessage(msg);
                }
                String received=result.toString();
                before=result.toString();
                Log.i("readlog", "run: sendcontent2"+content);
                Log.i("readlog", "run: resultreceived:"+received);
                // socketInputStream.reset();
                //bff.close();
            }
        }
    };
}
